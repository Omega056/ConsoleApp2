using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

class Program
{
    private static readonly TelegramBotClient botClient = new("8024660428:AAFTnnOrNPy6srKgYIJ74IOidhUFORYFUds");
    private static readonly Dictionary<long, string> userStates = new();
    private static readonly Dictionary<long, string> userLang = new();
    private static readonly Dictionary<string, string> registeredUsers = new();
    private static readonly Dictionary<long, string> userIin = new();
    private static readonly Dictionary<long, List<Dictionary<string, string>>> userConversations = new();

    private static readonly HttpClient client = new();
    private const string apiKey = "AIzaSyBqrFqFrD0PNeSljLD6awnPn4Hgsj5Yzxc";
    private const string geminiEndpoint = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=" + apiKey;

    static async Task Main()
    {
        using var cts = new CancellationTokenSource();
        botClient.StartReceiving(
            HandleUpdateAsync,
            HandleErrorAsync,
            new ReceiverOptions { AllowedUpdates = Array.Empty<UpdateType>() },
            cancellationToken: cts.Token
        );

        var me = await botClient.GetMe();
        Console.WriteLine($"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{me.Username}");
        Console.ReadLine();
    }

    private static async Task HandleUpdateAsync(ITelegramBotClient bot, Update update, CancellationToken token)
    {
        if (update.Message?.Text is not string messageText)
            return;

        var chatId = update.Message.Chat.Id;
        if (!userLang.TryGetValue(chatId, out var lang))
        {
            userLang[chatId] = "waiting_language";
            await bot.SendTextMessageAsync(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:\n1. –†—É—Å—Å–∫–∏–π\n2. “ö–∞–∑–∞“õ—à–∞", cancellationToken: token);
            return;
        }

        if (lang == "waiting_language")
        {
            userLang[chatId] = messageText switch
            {
                "1" => "ru",
                "2" => "kz",
                _ => null
            };
            if (userLang[chatId] == null)
            {
                await bot.SendTextMessageAsync(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä / –¢–∞“£–¥–∞—É –¥“±—Ä—ã—Å –µ–º–µ—Å", cancellationToken: token);
                return;
            }

            userStates[chatId] = "choose_action";
            await bot.SendTextMessageAsync(chatId,
                userLang[chatId] == "ru" ? "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:" : "”ò—Ä–µ–∫–µ—Ç—Ç—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
                replyMarkup: GetMainActionKeyboard(userLang[chatId]),
                cancellationToken: token
            );
            return;
        }

        userStates.TryGetValue(chatId, out var state);
        switch (state)
        {
            case "choose_action":
                if (messageText.Contains("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è") || messageText.Contains("–¢—ñ—Ä–∫–µ–ª—É"))
                    userStates[chatId] = "register_iin";
                else if (messageText.Contains("–í—Ö–æ–¥") || messageText.Contains("–ö—ñ—Ä—É"))
                    userStates[chatId] = "login_iin";
                else if (messageText.Contains("–ù–µ–π—Ä–æ—Å–µ—Ç—å") || messageText.Contains("–ù–µ–π—Ä–æ–∂–µ–ª—ñ–ª–µ—Ä"))
                    userStates[chatId] = "neural_network_query";

                if (userStates[chatId] == "register_iin")
                    await bot.SendTextMessageAsync(chatId, lang == "ru" ? "–í–≤–µ–¥–∏—Ç–µ –ò–ò–ù –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:" : "–¢—ñ—Ä–∫–µ–ª—É “Ø—à—ñ–Ω –ò–ò–ù –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:", cancellationToken: token);
                else if (userStates[chatId] == "login_iin")
                    await bot.SendTextMessageAsync(chatId, lang == "ru" ? "–í–≤–µ–¥–∏—Ç–µ –ò–ò–ù –¥–ª—è –≤—Ö–æ–¥–∞:" : "–ö—ñ—Ä—É “Ø—à—ñ–Ω –ò–ò–ù –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:", cancellationToken: token);
                else if (userStates[chatId] == "neural_network_query")
                    await bot.SendTextMessageAsync(chatId, lang == "ru" ? "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:" : "–ù–µ–π—Ä–æ–∂–µ–ª—ñ–ª–µ—Ä–≥–µ —Å“±—Ä–∞“ì—ã“£—ã–∑–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:", replyMarkup: GetExitKeyboard(lang), cancellationToken: token);
                break;

            case "register_iin":
                userIin[chatId] = messageText;
                if (registeredUsers.ContainsKey(messageText))
                {
                    await bot.SendTextMessageAsync(chatId, lang == "ru" ? "–≠—Ç–æ—Ç –ò–ò–ù —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω." : "–ë“±–ª –ò–ò–ù –±“±—Ä—ã–Ω —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω.", cancellationToken: token);
                    userStates[chatId] = "choose_action";
                }
                else
                {
                    userStates[chatId] = "register_password";
                    await bot.SendTextMessageAsync(chatId, lang == "ru" ? "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å:" : "“ö“±–ø–∏—è —Å”©–∑ –æ–π–ª–∞–ø —Ç–∞–±—ã“£—ã–∑:", cancellationToken: token);
                }
                break;

            case "register_password":
                registeredUsers[userIin[chatId]] = messageText;
                userStates[chatId] = "authenticated";
                await bot.SendTextMessageAsync(chatId, lang == "ru" ? "–£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!" : "–°”ô—Ç—Ç—ñ —Ç—ñ—Ä–∫–µ–ª–¥—ñ“£—ñ–∑!", cancellationToken: token);
                await ShowMainMenu(bot, chatId, lang, token);
                break;

            case "login_iin":
                userIin[chatId] = messageText;
                if (!registeredUsers.ContainsKey(messageText))
                {
                    await bot.SendTextMessageAsync(chatId, lang == "ru" ? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω." : "–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Ç–∞–±—ã–ª–º–∞–¥—ã.", cancellationToken: token);
                    userStates[chatId] = "choose_action";
                }
                else
                {
                    userStates[chatId] = "login_password";
                    await bot.SendTextMessageAsync(chatId, lang == "ru" ? "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:" : "“ö“±–ø–∏—è —Å”©–∑–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:", cancellationToken: token);
                }
                break;

            case "login_password":
                if (registeredUsers.TryGetValue(userIin[chatId], out var pass) && pass == messageText)
                {
                    userStates[chatId] = "authenticated";
                    await bot.SendTextMessageAsync(chatId, lang == "ru" ? "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!" : "–ö—ñ—Ä—É —Å”ô—Ç—Ç—ñ –æ—Ä—ã–Ω–¥–∞–ª–¥—ã!", cancellationToken: token);
                    await ShowMainMenu(bot, chatId, lang, token);
                }
                else
                {
                    await bot.SendTextMessageAsync(chatId, lang == "ru" ? "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å." : "“ö“±–ø–∏—è —Å”©–∑ –¥“±—Ä—ã—Å –µ–º–µ—Å.", cancellationToken: token);
                    userStates[chatId] = "choose_action";
                }
                break;

            case "authenticated":
                await HandleMenuSelection(bot, chatId, messageText, lang, token);
                break;

            case "neural_network_query":
                if (messageText == "üîô –í—ã–π—Ç–∏")
                {
                    userStates[chatId] = "choose_action";
                    await bot.SendTextMessageAsync(chatId,
                        lang == "ru" ? "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é." : "–°—ñ–∑ –±–∞—Å—Ç—ã –º”ô–∑—ñ—Ä–≥–µ –æ—Ä–∞–ª–¥—ã“£—ã–∑.",
                        replyMarkup: GetMainActionKeyboard(lang),
                        cancellationToken: token);
                    break;
                }

                var response = await GetResponseFromGemini(chatId, messageText);
                await bot.SendTextMessageAsync(chatId, response, replyMarkup: GetExitKeyboard(lang), cancellationToken: token);
                break;
        }
    }

    private static async Task<string> GetResponseFromGemini(long chatId, string userInput)
    {
        if (!userConversations.ContainsKey(chatId))
            userConversations[chatId] = new();

        userConversations[chatId].Add(new Dictionary<string, string> { { "role", "user" }, { "parts", userInput } });

        var messages = new List<object>();
        foreach (var msg in userConversations[chatId])
        {
            messages.Add(new
            {
                role = msg["role"],
                parts = new[] { new { text = msg["parts"] } }
            });
        }

        var requestBody = new { contents = messages };
        var json = JsonConvert.SerializeObject(requestBody);

        var request = new HttpRequestMessage(HttpMethod.Post, geminiEndpoint)
        {
            Content = new StringContent(json, Encoding.UTF8, "application/json")
        };

        try
        {
            var response = await client.SendAsync(request);
            var result = await response.Content.ReadAsStringAsync();

            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine("Gemini API error: " + result);
                return $"–û—à–∏–±–∫–∞: {response.StatusCode}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
            }

            dynamic obj = JsonConvert.DeserializeObject(result);
            string text = obj?.candidates?[0]?.content?.parts?[0]?.text;
            if (!string.IsNullOrWhiteSpace(text))
            {
                userConversations[chatId].Add(new Dictionary<string, string> { { "role", "model" }, { "parts", text } });
                return text.Trim();
            }

            return "–ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç–∞.";
        }
        catch (Exception ex)
        {
            Console.WriteLine("[Gemini Exception] " + ex.Message);
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.";
        }
    }

    private static async Task ShowMainMenu(ITelegramBotClient bot, long chatId, string lang, CancellationToken token)
    {
        var keyboard = new ReplyKeyboardMarkup(new[]
        {
            new KeyboardButton[] { new(lang == "ru" ? "üìÑ –û—Ç—á–µ—Ç—ã" : "üìÑ –ï—Å–µ–ø—Ç–µ—Ä") },
            new KeyboardButton[] { new(lang == "ru" ? "üìä –ù–∞–ª–æ–≥–∏" : "üìä –°–∞–ª—ã“õ—Ç–∞—Ä") },
            new KeyboardButton[] { new(lang == "ru" ? "üìé –î–æ–∫—É–º–µ–Ω—Ç—ã" : "üìé “ö“±–∂–∞—Ç—Ç–∞—Ä") },
            new KeyboardButton[] { new(lang == "ru" ? "‚ùì –ü–æ–º–æ—â—å" : "‚ùì –ö”©–º–µ–∫") },
            new KeyboardButton[] { new(lang == "ru" ? "üß† –ù–µ–π—Ä–æ—Å–µ—Ç—å" : "üß† –ù–µ–π—Ä–æ–∂–µ–ª—ñ–ª–µ—Ä") }
        })
        { ResizeKeyboard = true };
        await bot.SendTextMessageAsync(chatId, lang == "ru" ? "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –º–µ–Ω—é:" : "–ú”ô–∑—ñ—Ä –±”©–ª—ñ–º—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑:", replyMarkup: keyboard, cancellationToken: token);
    }

    private static async Task HandleMenuSelection(ITelegramBotClient bot, long chatId, string messageText, string lang, CancellationToken token)
    {
        if (messageText.Contains("–û—Ç—á–µ—Ç—ã") || messageText.Contains("–ï—Å–µ–ø—Ç–µ—Ä"))
            await bot.SendTextMessageAsync(chatId, lang == "ru" ? "–í–∞—à–∏ –æ—Ç—á–µ—Ç—ã:\n1. –î–µ–∫–ª–∞—Ä–∞—Ü–∏—è –ø–æ –ò–ü–ù\n2. –û—Ç—á–µ—Ç –ø–æ —Å–æ—Ü. –≤—ã–ø–ª–∞—Ç–∞–º\n3. –ù–î–° –æ—Ç—á–µ—Ç" : "–°—ñ–∑–¥—ñ“£ –µ—Å–µ–ø—Ç–µ—Ä—ñ“£—ñ–∑:\n1. –ñ–¢–° –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è—Å—ã\n2. ”ò–ª–µ—É–º–µ—Ç—Ç—ñ–∫ —Ç”©–ª–µ–º–¥–µ—Ä –µ—Å–µ–±—ñ\n3. “ö“ö–° –µ—Å–µ–±—ñ", cancellationToken: token);
        else if (messageText.Contains("–ù–∞–ª–æ–≥–∏") || messageText.Contains("–°–∞–ª—ã“õ—Ç–∞—Ä"))
            await bot.SendTextMessageAsync(chatId, lang == "ru" ? "–†–∞–∑–¥–µ–ª '–ù–∞–ª–æ–≥–∏' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ." : "'–°–∞–ª—ã“õ—Ç–∞—Ä' –±”©–ª—ñ–º—ñ ”ô–∑—ñ—Ä–ª–µ–Ω—É–¥–µ.", cancellationToken: token);
        else if (messageText.Contains("–î–æ–∫—É–º–µ–Ω—Ç—ã") || messageText.Contains("“ö“±–∂–∞—Ç—Ç–∞—Ä"))
            await bot.SendTextMessageAsync(chatId, lang == "ru" ? "–†–∞–∑–¥–µ–ª '–î–æ–∫—É–º–µ–Ω—Ç—ã' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ." : "'“ö“±–∂–∞—Ç—Ç–∞—Ä' –±”©–ª—ñ–º—ñ ”ô–∑—ñ—Ä–ª–µ–Ω—É–¥–µ.", cancellationToken: token);
        else if (messageText.Contains("–ü–æ–º–æ—â—å") || messageText.Contains("–ö”©–º–µ–∫"))
            await bot.SendTextMessageAsync(chatId, lang == "ru" ? "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å." : "–°“±—Ä–∞“ì—ã“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑, –±—ñ–∑ –∫”©–º–µ–∫—Ç–µ—Å—É–≥–µ —Ç—ã—Ä—ã—Å–∞–º—ã–∑.", cancellationToken: token);
    }

    private static ReplyKeyboardMarkup GetExitKeyboard(string lang) => new(new[] { new[] { new KeyboardButton("üîô –í—ã–π—Ç–∏") } }) { ResizeKeyboard = true };

    private static ReplyKeyboardMarkup GetMainActionKeyboard(string lang) => new(new[]
    {
        new[] { new KeyboardButton(lang == "ru" ? "üîê –í—Ö–æ–¥" : "üîê –ö—ñ—Ä—É") },
        new[] { new KeyboardButton(lang == "ru" ? "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" : "üìù –¢—ñ—Ä–∫–µ–ª—É") },
        new[] { new KeyboardButton(lang == "ru" ? "üß† –ù–µ–π—Ä–æ—Å–µ—Ç—å" : "üß† –ù–µ–π—Ä–æ–∂–µ–ª—ñ–ª–µ—Ä") }
    })
    { ResizeKeyboard = true };

    private static Task HandleErrorAsync(ITelegramBotClient bot, Exception exception, CancellationToken token)
    {
        Console.WriteLine($"–û—à–∏–±–∫–∞: {exception.Message}");
        return Task.CompletedTask;
    }
}


    
